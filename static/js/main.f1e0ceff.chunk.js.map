{"version":3,"sources":["sudoku/types.ts","sudoku/utils.ts","sudoku/candidates.ts","sudoku/fillCells.ts","sudoku/sudoku.ts","components/Stepper.tsx","components/SudokuBoard.tsx","components/CtrlButtons.tsx","components/SudokuEditor.tsx","components/SudokuAnswer.tsx","components/SudokuUploader.tsx","components/Sudoku.tsx","components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FillMethods","clone","board","grid","map","v","candidates","process","allRows","rows","Array","forEach","cell","getY","i","push","allCols","cols","getX","allBoxes","boxes","getBoxId","ownRow","ownCol","ownBox","Math","floor","fillCandidatesInCellsGroup","cellsGroup","boards","cells","value","reduce","pre","cur","filter","includes","candidatesInCells","before","length","difficulty","focus","candidatesOnlyForBox","candidatesInBoxCells","group","candidatesInOtherCells","merge","fillCandidatesOnlyForBox","box","candidatesInBoxRows","_","row","candidatesInBoxCols","col","fillCandidates","fillCandidatesByLockInCellsGroup","sameCandidatesCells","c","every","some","others","filled","slice","fillCandidatesByLock","fillCandidatesByLock2InCellsGroup","lockedCandidates","candidatesMap","toString","otherCandidates","j","targets","find","fillCandidatesByLock2","easiestCell","sort","a","b","fillOnlyOneCellInCellsGroup","ownCells","method","fillables","otherCellCandidates","onlyCandidate","id","fillOneCell","fillOnlyOneCellInBox","fillOnlyOneCellInCol","fillOnlyOneCellInRow","fillOneConfirmedCell","solveByLogical","emptyCells","solveByContradiction","best","tempBoard","solved","validate","console","log","sameValueInRows","sameValueInCols","sameValueInBoxes","split","join","useStyles","makeStyles","root","width","stepper","paddingLeft","paddingRight","HorizontalStepper","props","classes","steps","className","Stepper","activeStep","step","alternativeLabel","label","Step","StepLabel","theme","margin","border","borderCollapse","borderSpacing","textAlign","position","content","display","paddingTop","cellValueWrapper","top","left","transform","cellValue","cellInBottomOfBox","borderBottom","cellInRightOfBox","borderRight","primaryColor","backgroundColor","palette","primary","main","secondaryColor","secondary","bold","fontWeight","Cell","color","bottomOfBox","rightOfBox","edit","InputBase","type","inputProps","inputMode","onChange","event","editCell","target","RegExp","test","SudokuBoard","hit","undefined","initGrid","y","x","p","editBoard","center","CtrlButtons","Grid","container","spacing","item","xs","Button","variant","disabled","disableLeft","onClick","handlerOnClickLeft","leftLabel","disableRight","handlerOnClickRight","rightLabel","maxWidth","ctrlButtons","marginTop","SudokuEditor","handlerEdit","React","useCallback","Container","onClickBackButton","onClickSolveButton","createMuiTheme","flexGrow","stepperButton","SudokuAnswer","useState","setActiveStep","displayHintMode","setDisplayHintMode","displayFilledCellMode","setDisplayFilledCellMode","SBCStepIndex","setSBCStepIndex","SBCSteps","history","handleFirst","handleBack","prevActiveStep","handleNext","handleLast","handlerSBC","handlerHintMode","handlerFilledMode","ThemeProvider","focusCells","clickFirst","clickBack","clickNext","clickLast","hintMode","filledMode","handlerOnChangeHintSwitch","handlerOnChangeFilledSwitch","ProgressMobileStepper","lastStep","MobileStepper","nextButton","IconButton","size","KeyboardArrowRight","fontSize","backButton","KeyboardArrowLeft","ModeSwitches","FormControlLabel","control","Switch","checked","text","marginBottom","input","backdrop","zIndex","drawer","resizeImage","image","Promise","resolve","Resizer","imageFileResizer","uri","SudokuUploader","uploading","setUploading","handlerUpload","e","files","base64Image","axiosRetry","axios","retryDelay","exponentialDelay","retryCondition","error","isNetworkOrIdempotentRequestError","response","status","post","timeout","catch","data","res","setInitBoard","Backdrop","open","CircularProgress","accept","htmlFor","component","SudokuBox","sudoku","setSudoku","setStep","handlerEditBoard","editedBoard","n","solveSudoku","solve","onlyFilledBoards","Header","AppBar","Toolbar","Typography","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1e0ceff.chunk.js","sourcesContent":["export type SudokuNumber =\n  | \"\"\n  | \"1\"\n  | \"2\"\n  | \"3\"\n  | \"4\"\n  | \"5\"\n  | \"6\"\n  | \"7\"\n  | \"8\"\n  | \"9\";\nexport type Cell = {\n  readonly i: Position;\n  value: SudokuNumber;\n  candidates: Candidates;\n  difficulty: number;\n};\nexport type Candidates = SudokuNumber[];\n\nexport type Cells = Cell[];\nexport const FillMethods = {\n  FillOne: \"FillOne\",\n  FillOnlyOneInRow: \"FillOnlyOneInRow\",\n  FillOnlyOneInCol: \"FillOnlyOneInCol\",\n  FillOnlyOneInBox: \"FillOnlyOneInBox\",\n  FillTemporary: \"FillTemporary\",\n} as const;\nexport type FillMethod = typeof FillMethods[keyof typeof FillMethods];\n\nexport const CalCandidateMethods = {\n  FillOne: \"FillOne\",\n  FillOnlyOneInRow: \"FillOnlyOneInRow\",\n  FillOnlyOneInCol: \"FillOnlyOneInCol\",\n  FillOnlyOneInBox: \"FillOnlyOneInBox\",\n} as const;\nexport type CalCandidateMethod =\n  typeof CalCandidateMethods[keyof typeof CalCandidateMethods];\n\nexport type FillCellProcess = Readonly<{\n  id: FillMethod;\n  i: Position;\n}>;\n\ntype FillCandidateProcess = Readonly<{\n  focus: Position[];\n}>;\n\nconst position = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,\n  79, 80,\n] as const;\nexport type Position = typeof position[number];\n\nexport type CellsGroup = Cells[];\n\nexport const Edge = 9;\n\nexport type Board = {\n  grid: Cells;\n  process: FillCellProcess | FillCandidateProcess | null;\n};\n\nexport type Boards = Board[];\n\nexport type Sudoku = {\n  history: Boards;\n};\n\n// Sudoku\n//  History\n\n// Board\n//  Grid\n//   Cell\n//    Position\n//    SudokuNumber\n//  Process\n//   Method\n//   Position\n\n// Candidate\n","import { Board, CellsGroup, Position, Edge, Cells } from \"./types\";\n\nexport const clone = (board: Board): Board => {\n  const grid = board.grid.map((v) => {\n    return {\n      ...v,\n      candidates: [...v.candidates],\n    };\n  });\n\n  return {\n    grid,\n    process: null,\n  };\n};\n\nexport const allRows = (board: Board): CellsGroup => {\n  const rows: CellsGroup = [...Array(Edge)].map(() => []);\n  board.grid.forEach((cell) => {\n    rows[getY(cell.i)].push(cell);\n  });\n  return rows;\n};\n\nexport const allCols = (board: Board): CellsGroup => {\n  const cols: CellsGroup = [...Array(Edge)].map(() => []);\n  board.grid.forEach((cell) => {\n    cols[getX(cell.i)].push(cell);\n  });\n  return cols;\n};\n\nexport const allBoxes = (board: Board): CellsGroup => {\n  const boxes: CellsGroup = [...Array(Edge)].map(() => []);\n  board.grid.forEach((cell) => {\n    boxes[getBoxId(cell.i)].push(cell);\n  });\n  return boxes;\n};\n\nexport const ownRow = (board: Board, i: Position): Cells => {\n  const rows = allRows(board);\n  return rows[getY(i)];\n};\n\nexport const ownCol = (board: Board, i: Position): Cells => {\n  const cols = allCols(board);\n  return cols[getX(i)];\n};\n\nexport const ownBox = (board: Board, i: Position): Cells => {\n  const boxes = allBoxes(board);\n  return boxes[getBoxId(i)];\n};\n\nexport const getX = (i: Position): number => i % Edge;\nexport const getY = (i: Position): number => Math.floor(i / Edge);\n\n// BoxId is a position of box\n// ----------\n// 0 | 1 | 2\n// 3 | 4 | 5\n// 6 | 7 | 8\n// ----------\n// e.g.)\n// i = 0,1,2,9,10,11,18,19,20 => idx = 0\n// i = 30,31,32,39,40,41,48,49,50 => idx = 4\nexport const getBoxId = (i: Position): number =>\n  Math.floor(getX(i) / 3) + Math.floor(getY(i) / 3) * 3;\n","import {\n  Cells,\n  Boards,\n  Candidates,\n  CellsGroup,\n  Board,\n  SudokuNumber,\n} from \"./types\";\nimport { allBoxes, clone, allCols, allRows, ownRow, ownCol } from \"./utils\";\n\nconst candidatesInCells = (cells: Cells) => {\n  const candidates = cells\n    .map((cell) => [cell.value] as Candidates)\n    .reduce((pre, cur) => [...pre, ...cur], []);\n\n  return ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"] as Candidates).filter(\n    (v) => !candidates.includes(v)\n  );\n};\n\nconst fillCandidatesInCellsGroup = (\n  board: Board,\n  cellsGroup: CellsGroup\n): Boards => {\n  const boards: Boards = [];\n\n  cellsGroup.forEach((cells) => {\n    const candidates = candidatesInCells(cells);\n    cells.forEach((cell) => {\n      if (cell.value) {\n        board.grid[cell.i].candidates = [];\n        return;\n      }\n      const before = board.grid[cell.i].candidates.length;\n      board.grid[cell.i].candidates = cell.candidates.filter((v) =>\n        candidates.includes(v)\n      );\n      if (board.grid[cell.i].candidates.length < before) {\n        board.grid[cell.i].difficulty *= 2;\n      }\n    });\n\n    boards.push({\n      ...clone(board),\n      process: {\n        focus: cells.map((cell) => cell.i),\n      },\n    });\n  });\n\n  return boards;\n};\n\nconst candidatesOnlyForBox = (\n  candidatesInBoxCells: Candidates[]\n): Candidates[] =>\n  candidatesInBoxCells.map((candidates, i, group) => {\n    const candidatesInOtherCells = [0, 1, 2]\n      .filter((v) => v !== i)\n      .map((v) => group[v])\n      .reduce((merge, candidates) => [\n        ...merge,\n        ...candidates.filter((v) => !merge.includes(v)),\n      ]);\n\n    return candidates.filter((v) => !candidatesInOtherCells.includes(v));\n  });\n\n// |1|2|3|\n// |4|5|6|\n// |7| | | <- *1\n//\n// *1 These null cells must be filled 8 or 9\n//    Therefore, cells without the null cells in the row including the cells must not be filled 8 and 9.\nexport const fillCandidatesOnlyForBox = (board: Board): Boards => {\n  const boards: Boards = [];\n\n  allBoxes(board).forEach((box) => {\n    // Check Rows in Box\n    const candidatesInBoxRows = box\n      .filter((_, i) => i % 3 === 0)\n      .map((_, i) => [box[3 * i], box[3 * i + 1], box[3 * i + 2]])\n      .map((row) =>\n        row\n          .map((cell) => cell.candidates)\n          .reduce((merge, candidates) => [\n            ...merge,\n            ...candidates.filter((v) => !merge.includes(v)),\n          ])\n      );\n\n    candidatesOnlyForBox(candidatesInBoxRows).forEach(\n      (candidatesOnlyForBox, i) => {\n        const row = ownRow(board, box[i * 3].i);\n        const cellsNotInBox = row.filter(\n          (cell) => cell.i < box[i * 3].i || box[i * 3 + 2].i < cell.i\n        );\n        cellsNotInBox.forEach((cell) => {\n          const before = board.grid[cell.i].candidates.length;\n          board.grid[cell.i].candidates = board.grid[cell.i].candidates.filter(\n            (v) => !candidatesOnlyForBox.includes(v)\n          );\n          if (board.grid[cell.i].candidates.length < before) {\n            board.grid[cell.i].difficulty *= 3;\n          }\n        });\n\n        boards.push({\n          ...clone(board),\n          process: {\n            focus: row.map((cell) => cell.i),\n          },\n        });\n      }\n    );\n\n    // Check Cols in Box\n    const candidatesInBoxCols = box\n      .filter((_, i) => Math.floor(i / 3) === 0)\n      .map((_, i) => [box[i], box[i + 3], box[i + 6]])\n      .map((col) =>\n        col\n          .map((cell) => cell.candidates)\n          .reduce((merge, candidates) => [\n            ...merge,\n            ...candidates.filter((v) => !merge.includes(v)),\n          ])\n      );\n\n    candidatesOnlyForBox(candidatesInBoxCols).forEach(\n      (candidatesOnlyForBox, i) => {\n        const col = ownCol(board, box[i].i);\n        const cellsNotInBox = col.filter(\n          (cell) => cell.i < box[i].i || box[i + 6].i < cell.i\n        );\n        cellsNotInBox.forEach((cell) => {\n          const before = board.grid[cell.i].candidates.length;\n          board.grid[cell.i].candidates = board.grid[cell.i].candidates.filter(\n            (v) => !candidatesOnlyForBox.includes(v)\n          );\n          if (board.grid[cell.i].candidates.length < before) {\n            board.grid[cell.i].difficulty *= 3;\n          }\n        });\n        boards.push({\n          ...clone(board),\n          process: {\n            focus: col.map((cell) => cell.i),\n          },\n        });\n      }\n    );\n  });\n\n  return boards;\n};\n\nexport const fillCandidates = (board: Board): Boards => {\n  let boards = fillCandidatesInCellsGroup(board, allRows(board));\n\n  boards = [\n    ...boards,\n    ...fillCandidatesInCellsGroup(\n      clone(boards[boards.length - 1]),\n      allCols(boards[boards.length - 1])\n    ),\n  ];\n\n  boards = [\n    ...boards,\n    ...fillCandidatesInCellsGroup(\n      clone(boards[boards.length - 1]),\n      allBoxes(boards[boards.length - 1])\n    ),\n  ];\n\n  return boards;\n};\n\nconst fillCandidatesByLockInCellsGroup = (\n  board: Board,\n  cellsGroup: CellsGroup\n): Boards => {\n  const boards: Boards = [clone(board)];\n\n  cellsGroup.forEach((cells) => {\n    cells.forEach((cell, i) => {\n      const sameCandidatesCells = cells.filter(\n        (c) =>\n          cell.candidates.length === c.candidates.length &&\n          cell.candidates.every((v) => c.candidates.includes(v))\n      );\n      // 一度処理したLockedCellを再処理しない\n      if (sameCandidatesCells.some((c) => c.i < i)) {\n        return;\n      }\n\n      if (cell.candidates.length !== sameCandidatesCells.length) {\n        return;\n      }\n\n      const others = cells\n        .filter((cell) => sameCandidatesCells.every((c) => cell.i !== c.i))\n        .map((cell) => cell.i);\n\n      const filled = clone(boards[boards.length - 1]);\n      filled.grid = filled.grid.map((cell) => {\n        if (!others.includes(cell.i)) {\n          return cell;\n        }\n        return {\n          ...cell,\n          candidates: cell.candidates.filter(\n            (v) => !sameCandidatesCells[0].candidates.includes(v)\n          ),\n          difficulty: cell.difficulty * 4,\n        };\n      });\n      filled.process = {\n        focus: cells.map((cell) => cell.i),\n      };\n\n      boards.push(filled);\n    });\n  });\n\n  return boards.slice(1);\n};\n\nexport const fillCandidatesByLock = (board: Board): Boards => {\n  let boards = [clone(board)];\n  boards = [\n    ...boards,\n    ...fillCandidatesByLockInCellsGroup(\n      clone(boards[boards.length - 1]),\n      allRows(boards[boards.length - 1])\n    ),\n  ];\n  boards = [\n    ...boards,\n    ...fillCandidatesByLockInCellsGroup(\n      clone(boards[boards.length - 1]),\n      allCols(boards[boards.length - 1])\n    ),\n  ];\n  return [\n    ...boards.slice(1),\n    ...fillCandidatesByLockInCellsGroup(\n      clone(boards[boards.length - 1]),\n      allBoxes(board)\n    ),\n  ];\n};\n\nconst fillCandidatesByLock2InCellsGroup = (\n  board: Board,\n  cellsGroup: CellsGroup\n): Boards => {\n  const boards = [clone(board)];\n  cellsGroup.forEach((cells) => {\n    const lockedCandidates: Candidates = [];\n\n    const candidatesMap = [...Array(9)].map((_, i) => {\n      const v = (i + 1).toString() as SudokuNumber;\n      return cells.filter((cell) => cell.candidates.includes(v));\n    });\n    candidatesMap.forEach((cells, i) => {\n      const otherCandidates = candidatesMap.filter(\n        (c) =>\n          cells.length === c.length &&\n          cells.every((cell, j) => cell.i === c[j].i)\n      ).length;\n      if (cells.length !== otherCandidates) {\n        return;\n      }\n\n      lockedCandidates.push((i + 1).toString() as SudokuNumber);\n    });\n\n    if (lockedCandidates.length === 0) {\n      return;\n    }\n\n    const targets = cells.filter(\n      (cell) =>\n        cell.candidates.length > lockedCandidates.length &&\n        lockedCandidates.every((v) => cell.candidates.includes(v))\n    );\n\n    if (targets.length === 0) {\n      return;\n    }\n\n    const filled = clone(boards[boards.length - 1]);\n    filled.grid = filled.grid.map((cell) => {\n      if (!targets.find((c) => c.i === cell.i)) {\n        return cell;\n      }\n      return {\n        ...cell,\n        candidates: cell.candidates.filter((v) => lockedCandidates.includes(v)),\n        difficulty: cell.difficulty * 4,\n      };\n    });\n    filled.process = {\n      focus: cells.map((cell) => cell.i),\n    };\n\n    boards.push(filled);\n  });\n\n  return boards.slice(1);\n};\n\nexport const fillCandidatesByLock2 = (board: Board): Boards => {\n  let boards = [clone(board)];\n  boards = [\n    ...boards,\n    ...fillCandidatesByLock2InCellsGroup(\n      clone(boards[boards.length - 1]),\n      allRows(boards[boards.length - 1])\n    ),\n  ];\n  boards = [\n    ...boards,\n    ...fillCandidatesByLock2InCellsGroup(\n      clone(boards[boards.length - 1]),\n      allCols(boards[boards.length - 1])\n    ),\n  ];\n  return [\n    ...boards.slice(1),\n    ...fillCandidatesByLock2InCellsGroup(\n      clone(boards[boards.length - 1]),\n      allBoxes(board)\n    ),\n  ];\n};\n","import { Board, FillMethods, FillMethod, Cells, Position } from \"./types\";\nimport { ownBox, ownCol, ownRow } from \"./utils\";\n\nconst easiestCell = (cells: Cells) =>\n  cells.sort((a, b) => a.difficulty - b.difficulty)[0];\n\n// 確定法（１マスのみを見てそこに入る可能性のある数字が一つしかない場合に確定する方式）\nconst fillOneConfirmedCell = (board: Board) => {\n  const fillables = board.grid\n    .map((cell) => {\n      if (cell.value || cell.candidates.length !== 1) {\n        return null;\n      }\n      return {\n        ...cell,\n        value: cell.candidates[0],\n        candidates: [],\n        difficulty: 0,\n      };\n    })\n    .filter((cell) => cell !== null);\n\n  if (fillables.length) {\n    const cell = easiestCell(fillables as Cells);\n    board.process = {\n      id: FillMethods.FillOne,\n      i: cell.i,\n    };\n    board.grid[cell.i] = cell;\n  }\n\n  return board;\n};\n\n// 各セルのグループ（Row,Col,Box）を見て、そのグループ内で特定の数字が一か所にしか入らない場合、確定させる\nconst fillOnlyOneCellInCellsGroup = (\n  board: Board,\n  ownCells: (board: Board, i: Position) => Cells,\n  method: FillMethod\n) => {\n  const fillables = board.grid\n    .map((cell) => {\n      if (cell.value) {\n        return null;\n      }\n\n      const otherCellCandidates = ownCells(board, cell.i)\n        .filter((c) => c.i !== cell.i)\n        .map((cell) => cell.candidates)\n        .reduce((merge, cur) => [\n          ...merge,\n          ...cur.filter((v) => !merge.includes(v)),\n        ]);\n\n      const onlyCandidate = cell.candidates.filter(\n        (v) => !otherCellCandidates.includes(v)\n      );\n\n      if (onlyCandidate.length !== 1) {\n        return null;\n      }\n\n      return {\n        ...cell,\n        value: onlyCandidate[0],\n        candidates: [],\n        difficulty: 0,\n      };\n    })\n    .filter((cell) => cell !== null);\n\n  if (fillables.length) {\n    const cell = easiestCell(fillables as Cells);\n    board.process = {\n      id: method,\n      i: cell.i,\n    };\n    board.grid[cell.i] = cell;\n  }\n\n  return board;\n};\n\nconst fillOnlyOneCellInCol = (board: Board) => {\n  return fillOnlyOneCellInCellsGroup(\n    board,\n    ownCol,\n    FillMethods.FillOnlyOneInCol\n  );\n};\n\nconst fillOnlyOneCellInRow = (board: Board) => {\n  return fillOnlyOneCellInCellsGroup(\n    board,\n    ownRow,\n    FillMethods.FillOnlyOneInRow\n  );\n};\n\nconst fillOnlyOneCellInBox = (board: Board) => {\n  return fillOnlyOneCellInCellsGroup(\n    board,\n    ownBox,\n    FillMethods.FillOnlyOneInBox\n  );\n};\n\nexport const fillOneCell = (board: Board): Board => {\n  board = fillOnlyOneCellInBox(board);\n  if (board.process) {\n    return board;\n  }\n\n  board = fillOnlyOneCellInCol(board);\n  if (board.process) {\n    return board;\n  }\n\n  board = fillOnlyOneCellInRow(board);\n  if (board.process) {\n    return board;\n  }\n\n  board = fillOneConfirmedCell(board);\n\n  return board;\n};\n","import {\n  Board,\n  SudokuNumber,\n  Cells,\n  Position,\n  Boards,\n  FillMethods,\n} from \"./types\";\nimport {\n  fillCandidates,\n  fillCandidatesByLock,\n  fillCandidatesByLock2,\n  fillCandidatesOnlyForBox,\n} from \"./candidates\";\nimport { fillOneCell } from \"./fillCells\";\nimport { allBoxes, allCols, allRows, clone } from \"./utils\";\n\nexport const solve = (board: Board): Boards => {\n  const boards = solveByLogical(board);\n  if (solved(boards[boards.length - 1])) {\n    return boards;\n  }\n\n  return [...boards, ...solveByContradiction(clone(boards[boards.length - 1]))];\n};\n\nconst solveByLogical = (board: Board): Boards => {\n  let boards = [board];\n  const emptyCells = board.grid.filter((cell) => cell.value === \"\");\n\n  for (let i = 0; i < emptyCells.length; i++) {\n    boards = [...boards, ...fillCandidates(clone(boards[boards.length - 1]))];\n    boards = [...boards, fillOneCell(clone(boards[boards.length - 1]))];\n\n    if (boards[boards.length - 1].process) {\n      continue;\n    }\n    boards = [\n      ...boards,\n      ...fillCandidatesOnlyForBox(clone(boards[boards.length - 1])),\n    ];\n    boards = [...boards, fillOneCell(clone(boards[boards.length - 1]))];\n\n    if (boards[boards.length - 1].process) {\n      continue;\n    }\n    boards = [\n      ...boards,\n      ...fillCandidatesByLock(clone(boards[boards.length - 1])),\n    ];\n    boards = [...boards, fillOneCell(clone(boards[boards.length - 1]))];\n\n    if (boards[boards.length - 1].process) {\n      continue;\n    }\n    boards = [\n      ...boards,\n      ...fillCandidatesByLock2(clone(boards[boards.length - 1])),\n    ];\n    boards = [...boards, fillOneCell(clone(boards[boards.length - 1]))];\n\n    if (boards[boards.length - 1].process === null) {\n      break;\n    }\n  }\n\n  return boards;\n};\n\nconst solveByContradiction = (board: Board): Boards => {\n  const cell = board.grid\n    .filter((cell) => cell.value === \"\")\n    .reduce((best, cell) => (cell.candidates < best.candidates ? cell : best));\n\n  for (let i = 0; i < cell.candidates.length; i++) {\n    const tempBoard = clone(board);\n    tempBoard.grid[cell.i].value = cell.candidates[i];\n    tempBoard.grid[cell.i].candidates = [];\n    tempBoard.process = {\n      id: FillMethods.FillTemporary,\n      i: cell.i,\n    };\n\n    const boards = [tempBoard, ...solveByLogical(clone(tempBoard))];\n    if (solved(boards[boards.length - 1])) {\n      return boards;\n    }\n\n    if (!validate(boards[boards.length - 1])) {\n      continue;\n    }\n\n    const c = solveByContradiction(clone(boards[boards.length - 1]));\n    if (c.length === 0) {\n      continue;\n    }\n\n    return [...boards, ...c];\n  }\n\n  console.log(\"Failed to solve\");\n  return [board];\n};\n\nconst solved = (board: Board) => {\n  return board.grid.every((cell) => cell.value !== \"\");\n};\n\nconst validate = (board: Board) => {\n  const rows = allRows(board);\n  const sameValueInRows = rows.some((row) =>\n    row.some((cell, i) =>\n      row.slice(i + 1).find((c) => cell.value !== \"\" && cell.value === c.value)\n    )\n  );\n\n  const cols = allCols(board);\n  const sameValueInCols = cols.some((col) =>\n    col.some((cell, i) =>\n      col.slice(i + 1).find((c) => cell.value !== \"\" && cell.value === c.value)\n    )\n  );\n\n  const boxes = allBoxes(board);\n  const sameValueInBoxes = boxes.some((box) =>\n    box.some((cell, i) =>\n      box.slice(i + 1).find((c) => cell.value !== \"\" && cell.value === c.value)\n    )\n  );\n\n  if (sameValueInRows || sameValueInCols || sameValueInBoxes) {\n    return false;\n  }\n\n  return !board.grid.some(\n    (cell) => cell.value === \"\" && cell.candidates.length === 0\n  );\n};\n\nconst sampleSudoku = (values: SudokuNumber[]): Board => {\n  const grid: Cells = values.map((v, i) => {\n    return {\n      i: i as Position,\n      value: v,\n      candidates: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n      difficulty: v === \"\" ? 1 : 0,\n    };\n  });\n  return { grid, process: null };\n};\n\nexport const difficult = sampleSudoku(\n  `\n. . 9  . 5 .  . 8 4\n. . 2  . 4 9  . 7 5\n. . .  . . .  . . .\n\n3 . 7  . . .  . 5 .\n. . .  6 . .  . . 2\n. . .  . 8 3  . . .\n\n. 8 .  . . 7  4 . .\n6 . 1  . 9 .  . . .\n. 2 .  1 . 5  . . .`\n    .split(\"\\n\")\n    .filter((v) => v.length)\n    .join(\" \")\n    .split(\" \")\n    .filter((v) => v.length)\n    .map((v) => (v === \".\" ? \"\" : v)) as SudokuNumber[]\n);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Stepper, Step, StepLabel } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  stepper: {\n    paddingLeft: \"5px\",\n    paddingRight: \"5px\",\n  },\n});\n\nconst getSteps = () => {\n  return [\"Upload Image\", \"Edit Sudoku\", \"Answer\"];\n};\n\nexport const HorizontalStepper = (props: { step: number }): JSX.Element => {\n  const classes = useStyles();\n  const steps = getSteps();\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        activeStep={props.step}\n        alternativeLabel\n        className={classes.stepper}\n      >\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { SudokuNumber, Position } from \"../sudoku/types\";\nimport { InputBase, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: \"auto\",\n  },\n  board: {\n    border: \"3px solid #333\",\n    borderCollapse: \"collapse\",\n    borderSpacing: 0,\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n  cell: {\n    border: \"1px solid #333\",\n    width: \"11%\",\n    position: \"relative\",\n    \"&::before\": {\n      content: \"''\",\n      display: \"block\",\n      paddingTop: \"100%\",\n    },\n  },\n  cellValueWrapper: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: 0,\n    width: \"100%\",\n    transform: \"translateY(-50%)\",\n  },\n  cellValue: {\n    textAlign: \"center\",\n  },\n  cellInBottomOfBox: {\n    borderBottom: \"3px solid #333\",\n  },\n  cellInRightOfBox: {\n    borderRight: \"3px solid #333\",\n  },\n  primaryColor: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  secondaryColor: {\n    backgroundColor: theme.palette.secondary.main,\n  },\n  bold: {\n    fontWeight: \"bold\",\n  },\n}));\n\ntype CellProps = {\n  value: string;\n  bottomOfBox: boolean;\n  rightOfBox: boolean;\n  focus: boolean;\n  color?: \"primary\" | \"secondary\";\n  bold?: boolean;\n  edit?: boolean;\n  editCell?: (v: SudokuNumber) => void;\n};\n\nconst Cell = (props: CellProps) => {\n  const classes = useStyles();\n  const className = [\n    classes.cell,\n    props.focus && props.color === \"primary\" ? classes.primaryColor : \"\",\n    props.focus && props.color === \"secondary\" ? classes.secondaryColor : \"\",\n    props.bold ? classes.bold : \"\",\n    props.bottomOfBox ? classes.cellInBottomOfBox : \"\",\n    props.rightOfBox ? classes.cellInRightOfBox : \"\",\n  ].join(\" \");\n\n  const handlerEdit = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!props.editCell) {\n      return;\n    }\n    if (event.target.value.length >= 1) {\n      const regex = new RegExp(\"^[1-9]{1}$\");\n      if (regex.test(event.target.value[0])) {\n        props.editCell(event.target.value[0] as SudokuNumber);\n        return;\n      }\n    }\n    props.editCell(\"\");\n  };\n\n  return (\n    <td className={className}>\n      {props.edit ? (\n        <InputBase\n          className={classes.cellValueWrapper}\n          value={props.value}\n          type=\"text\"\n          inputProps={{\n            \"aria-label\": \"naked\",\n            className: classes.cellValue,\n            inputMode: \"numeric\",\n          }}\n          onChange={handlerEdit}\n        />\n      ) : (\n        <div className={`${classes.cellValueWrapper} ${classes.cellValue}`}>\n          {props.value}\n        </div>\n      )}\n    </td>\n  );\n};\n\nexport type FocusCell = {\n  i: Position;\n  color: \"primary\" | \"secondary\";\n};\n\nexport type SudokuBoardProps = {\n  grid: SudokuNumber[];\n  initGrid?: SudokuNumber[];\n  focus?: FocusCell[];\n  edit?: boolean;\n  editBoard?: (i: Position) => (v: SudokuNumber) => void;\n};\n\nexport const SudokuBoard = (props: SudokuBoardProps): JSX.Element => {\n  const classes = useStyles();\n\n  const color = (i: Position) => {\n    if (!props.focus) {\n      return undefined;\n    }\n    const hit = props.focus.filter((v) => v.i === i);\n    return hit.length ? hit[0].color : undefined;\n  };\n  const focus = (i: Position) =>\n    props.focus ? props.focus.some((v) => i === v.i) : false;\n\n  const bold = (i: Position) =>\n    props.initGrid ? props.initGrid[i] !== \"\" : false;\n\n  const rows = (cells: SudokuNumber[]) => {\n    return cells\n      .map((_, i, cells) => (i % 9 > 0 ? [] : cells.slice(i, i + 9)))\n      .filter((v) => v.length > 0)\n      .map((v, y) => (\n        <tr key={\"tr\" + y}>\n          {v.map((v, x) => {\n            const p = (y * 9 + x) as Position;\n            return (\n              <Cell\n                edit={props.edit}\n                editCell={props.editBoard ? props.editBoard(p) : undefined}\n                value={v}\n                rightOfBox={x % 3 === 2}\n                bottomOfBox={y % 3 === 2}\n                focus={focus(p)}\n                color={color(p)}\n                bold={bold(p)}\n                key={\"cell\" + p}\n              />\n            );\n          })}\n        </tr>\n      ));\n  };\n\n  return (\n    <div className={classes.root}>\n      <table className={classes.board}>\n        <tbody>{rows(props.grid)}</tbody>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  center: {\n    textAlign: \"center\",\n  },\n});\n\ntype CtrlButtonsProps = {\n  handlerOnClickLeft: () => void;\n  handlerOnClickRight: () => void;\n  leftLabel: string;\n  rightLabel: string;\n  disableLeft?: boolean;\n  disableRight?: boolean;\n};\n\nexport const CtrlButtons = (props: CtrlButtonsProps): JSX.Element => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={3} className={classes.center}>\n      <Grid item xs={6}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={props.disableLeft}\n          onClick={props.handlerOnClickLeft}\n        >\n          {props.leftLabel}\n        </Button>\n      </Grid>\n      <Grid item xs={6}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={props.disableRight}\n          onClick={props.handlerOnClickRight}\n        >\n          {props.rightLabel}\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport { Container, makeStyles } from \"@material-ui/core\";\nimport { Cells, Position, SudokuNumber } from \"../sudoku/types\";\nimport { SudokuBoard } from \"./SudokuBoard\";\nimport { CtrlButtons } from \"./CtrlButtons\";\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: \"left\",\n    maxWidth: 600,\n  },\n  ctrlButtons: {\n    marginTop: \"10px\",\n    textAlign: \"center\",\n  },\n});\n\ntype EditSudokuProps = {\n  grid: Cells;\n  editBoard: (i: Position, v: SudokuNumber) => void;\n  onClickBackButton: () => void;\n  onClickSolveButton: () => void;\n};\n\nexport const SudokuEditor = (props: EditSudokuProps): JSX.Element => {\n  const classes = useStyles();\n  const handlerEdit = React.useCallback(\n    (i: Position) => (v: SudokuNumber) => props.editBoard(i, v),\n    [props]\n  );\n\n  return (\n    <Container className={classes.root}>\n      <div>\n        <SudokuBoard\n          grid={props.grid.map((cell) => cell.value)}\n          edit\n          editBoard={handlerEdit}\n        />\n      </div>\n      <div className={classes.ctrlButtons}>\n        <CtrlButtons\n          leftLabel=\"BACK\"\n          rightLabel=\"SOLVE\"\n          handlerOnClickLeft={props.onClickBackButton}\n          handlerOnClickRight={props.onClickSolveButton}\n        ></CtrlButtons>\n      </div>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport {\n  Container,\n  createMuiTheme,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  makeStyles,\n  MobileStepper,\n  Switch,\n  ThemeProvider,\n} from \"@material-ui/core\";\nimport { KeyboardArrowLeft, KeyboardArrowRight } from \"@material-ui/icons\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport { FocusCell, SudokuBoard } from \"./SudokuBoard\";\nimport { CtrlButtons } from \"./CtrlButtons\";\nimport { Boards, FillCellProcess, FillMethods } from \"../sudoku/types\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#4dabf5\",\n    },\n    secondary: {\n      main: \"#ffa733\",\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: \"left\",\n    maxWidth: 600,\n  },\n  stepper: {\n    flexGrow: 1,\n  },\n  stepperButton: {\n    display: \"flex\",\n  },\n  center: {\n    textAlign: \"center\",\n  },\n  left: {\n    textAlign: \"left\",\n  },\n});\n\nexport type SudokuAnswerProps = {\n  history: Boards;\n  onClickBackButton: () => void;\n};\n\nexport const SudokuAnswer = (props: SudokuAnswerProps): JSX.Element => {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [displayHintMode, setDisplayHintMode] = React.useState(false);\n  const [displayFilledCellMode, setDisplayFilledCellMode] =\n    React.useState(false);\n  const [SBCStepIndex, setSBCStepIndex] = React.useState(0);\n\n  const SBCSteps = props.history\n    .map((board, i) =>\n      (board.process as FillCellProcess)?.id === FillMethods.FillTemporary\n        ? i\n        : -1\n    )\n    .filter((v) => v !== -1);\n\n  const history = props.history.slice(0, SBCSteps[SBCStepIndex]);\n\n  const handleFirst = React.useCallback(() => {\n    setActiveStep(() => 0);\n  }, []);\n\n  const handleBack = React.useCallback(() => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  }, []);\n\n  const handleNext = React.useCallback(() => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  }, []);\n\n  const handleLast = React.useCallback(() => {\n    setActiveStep(() => history.length - 1);\n  }, [history]);\n\n  const handlerSBC = React.useCallback(() => {\n    setSBCStepIndex((pre) => pre + 1);\n  }, []);\n\n  const handlerHintMode = React.useCallback(() => {\n    setDisplayHintMode((pre) => !pre);\n  }, []);\n\n  const handlerFilledMode = React.useCallback(() => {\n    setDisplayFilledCellMode((pre) => !pre);\n  }, []);\n\n  const focusCells = () => {\n    const focusCells: FocusCell[] = [];\n\n    if (displayFilledCellMode && activeStep !== 0) {\n      focusCells.push({\n        i: (props.history[activeStep].process as FillCellProcess).i,\n        color: \"primary\",\n      });\n    }\n\n    if (displayHintMode && activeStep + 1 < history.length) {\n      focusCells.push({\n        i: (props.history[activeStep + 1].process as FillCellProcess).i,\n        color: \"secondary\",\n      });\n    }\n\n    return focusCells;\n  };\n\n  return (\n    <Container className={classes.root}>\n      <ThemeProvider theme={theme}>\n        <SudokuBoard\n          grid={history[activeStep].grid.map((cell) => cell.value)}\n          initGrid={props.history[0].grid.map((cell) => cell.value)}\n          focus={focusCells()}\n        />\n      </ThemeProvider>\n      <ProgressMobileStepper\n        steps={history.length}\n        activeStep={activeStep}\n        clickFirst={handleFirst}\n        clickBack={handleBack}\n        clickNext={handleNext}\n        clickLast={handleLast}\n      ></ProgressMobileStepper>\n      <ThemeProvider theme={theme}>\n        <ModeSwitches\n          hintMode={displayHintMode}\n          filledMode={displayFilledCellMode}\n          handlerOnChangeHintSwitch={handlerHintMode}\n          handlerOnChangeFilledSwitch={handlerFilledMode}\n        ></ModeSwitches>\n      </ThemeProvider>\n      <CtrlButtons\n        leftLabel=\"BACK\"\n        rightLabel=\"仮置きを実施\"\n        handlerOnClickLeft={props.onClickBackButton}\n        handlerOnClickRight={handlerSBC}\n        disableRight={activeStep !== SBCSteps[SBCStepIndex] - 1}\n      ></CtrlButtons>\n    </Container>\n  );\n};\n\ntype ProgressMobileStepperProps = {\n  steps: number;\n  activeStep: number;\n  clickFirst: () => void;\n  clickBack: () => void;\n  clickNext: () => void;\n  clickLast: () => void;\n};\n\nconst ProgressMobileStepper = (props: ProgressMobileStepperProps) => {\n  const classes = useStyles();\n  const lastStep = props.steps - 1;\n  return (\n    <MobileStepper\n      variant=\"progress\"\n      steps={props.steps}\n      position=\"static\"\n      activeStep={props.activeStep}\n      className={classes.stepper}\n      nextButton={\n        <div className={classes.stepperButton}>\n          <IconButton\n            size=\"small\"\n            onClick={props.clickNext}\n            disabled={props.activeStep === lastStep}\n          >\n            <KeyboardArrowRight fontSize=\"large\" />\n          </IconButton>\n          <IconButton\n            size=\"small\"\n            onClick={props.clickLast}\n            disabled={props.activeStep === lastStep}\n          >\n            <LastPageIcon fontSize=\"large\" />\n          </IconButton>\n        </div>\n      }\n      backButton={\n        <div className={classes.stepperButton}>\n          <IconButton\n            size=\"small\"\n            onClick={props.clickFirst}\n            disabled={props.activeStep === 0}\n          >\n            <FirstPageIcon fontSize=\"large\" />\n          </IconButton>\n          <IconButton\n            size=\"small\"\n            onClick={props.clickBack}\n            disabled={props.activeStep === 0}\n          >\n            <KeyboardArrowLeft fontSize=\"large\" />\n          </IconButton>\n        </div>\n      }\n    />\n  );\n};\n\ntype ModeSwitchesProps = {\n  hintMode: boolean;\n  filledMode: boolean;\n  handlerOnChangeHintSwitch: () => void;\n  handlerOnChangeFilledSwitch: () => void;\n};\n\nconst ModeSwitches = (props: ModeSwitchesProps) => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={3} className={classes.center}>\n      <Grid item xs={6}>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={props.hintMode}\n              onChange={props.handlerOnChangeHintSwitch}\n            />\n          }\n          label=\"ヒント\"\n        />\n      </Grid>\n      <Grid item xs={6}>\n        <FormControlLabel\n          control={\n            <Switch\n              color=\"primary\"\n              checked={props.filledMode}\n              onChange={props.handlerOnChangeFilledSwitch}\n            />\n          }\n          label=\"確定マス\"\n        />\n      </Grid>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport {\n  Backdrop,\n  Button,\n  CircularProgress,\n  Container,\n  Grid,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { Board, Cell, Position, SudokuNumber } from \"../sudoku/types\";\nimport axios, { AxiosError } from \"axios\";\nimport axiosRetry from \"axios-retry\";\nimport Resizer from \"react-image-file-resizer\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: \"left\",\n  },\n  center: {\n    textAlign: \"center\",\n  },\n  text: {\n    marginBottom: \"20px\",\n  },\n  input: {\n    display: \"none\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n}));\n\nconst resizeImage = (image: File): Promise<string> =>\n  new Promise((resolve) => {\n    Resizer.imageFileResizer(\n      image,\n      1000,\n      1000,\n      \"JPEG\",\n      100,\n      0,\n      (uri) => {\n        if (typeof uri === \"string\") {\n          resolve(uri.split(\",\")[1]);\n        }\n      },\n      \"base64\"\n    );\n  });\n\ntype SudokuUploaderProps = {\n  setInitBoard: (board: Board) => void;\n};\n\nexport const SudokuUploader = (props: SudokuUploaderProps): JSX.Element => {\n  const classes = useStyles();\n  const [uploading, setUploading] = React.useState<boolean>(false);\n\n  const handlerNoUpload = () => {\n    props.setInitBoard({\n      grid: [...Array(81)].map((_, i): Cell => {\n        return {\n          i: i as Position,\n          value: \"\",\n          candidates: [...Array(9)].map(\n            (_, i) => (i + 1).toString() as SudokuNumber\n          ),\n          difficulty: 1,\n        };\n      }),\n      process: null,\n    });\n  };\n\n  const handlerUpload = React.useCallback(\n    async (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (process.env.REACT_APP_API_ENDPOINT === undefined) {\n        console.log(\"error: invalid url of api server\");\n        return;\n      }\n      if (!e.target.files?.length) {\n        return;\n      }\n\n      setUploading(true);\n      const base64Image = await resizeImage(e.target.files[0]);\n      axiosRetry(axios, {\n        retryDelay: axiosRetry.exponentialDelay,\n        retryCondition: (error) =>\n          axiosRetry.isNetworkOrIdempotentRequestError(error) ||\n          error.response?.status === 429,\n      });\n      const res = await axios\n        .post<{ cells: SudokuNumber[] }>(\n          process.env.REACT_APP_API_ENDPOINT,\n          { image: base64Image },\n          { timeout: 30000 }\n        )\n        .catch((e: AxiosError<{ error: string }>) => {\n          if (e.response) {\n            console.log(`error: ${e.response.data.error}`);\n          }\n        });\n      setUploading(false);\n\n      if (!res) {\n        console.log(\"error: invalid response\");\n        return;\n      }\n\n      const board = {\n        grid: res.data.cells.map((v, i): Cell => {\n          return {\n            i: i as Position,\n            value: v,\n            candidates: [...Array(9)].map(\n              (_, i) => (i + 1).toString() as SudokuNumber\n            ),\n            difficulty: 1,\n          };\n        }),\n        process: null,\n      };\n      props.setInitBoard(board);\n    },\n    [props]\n  );\n\n  return (\n    <Container className={classes.root}>\n      <Container className={classes.text}>\n        <h2>サイトについて</h2>\n        自動で数独を解くことができるサイトです。ヒント表示なども可能です。\n        <ul>\n          <li>難しい数独の解答が知りたい！</li>\n          <li>次にどのマスが埋まるかが知りたい！</li>\n        </ul>\n        といったときにご利用ください。\n        <h2>モードについて</h2>\n        <ul>\n          <li>\n            <b>[UPLOAD]</b>:\n            数独の画像をアップロードすることで、自動で数字を埋めてくれます\n          </li>\n          <li>\n            <b>[NOT UPLOAD]</b>: ユーザ自身が数字を埋める必要があります\n          </li>\n        </ul>\n        <b>※注意点</b>:\n        [UPLOAD]モードは少々時間がかかります。また、画像によってはうまく認識できないこともありますので、アップロード後に数字があっているか確認してください。\n      </Container>\n      <Backdrop className={classes.backdrop} open={uploading}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <Grid container spacing={3} className={classes.center}>\n        <Grid item xs={6}>\n          <Button variant=\"contained\" color=\"primary\" onClick={handlerNoUpload}>\n            NO UPLOAD\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          <input\n            accept=\".jpg,.png,image/jpeg,image/png\"\n            className={classes.input}\n            id=\"contained-button-file\"\n            type=\"file\"\n            onChange={handlerUpload}\n          />\n          <label htmlFor=\"contained-button-file\">\n            <Button variant=\"contained\" color=\"primary\" component=\"span\">\n              UPLOAD\n            </Button>\n          </label>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { solve } from \"../sudoku/sudoku\";\nimport { Board, Position, Sudoku, SudokuNumber } from \"../sudoku/types\";\nimport { Container, makeStyles } from \"@material-ui/core\";\nimport { HorizontalStepper } from \"./Stepper\";\nimport { SudokuEditor } from \"./SudokuEditor\";\nimport { SudokuAnswer } from \"./SudokuAnswer\";\nimport { SudokuUploader } from \"./SudokuUploader\";\nimport { clone } from \"../sudoku/utils\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 800,\n    marginTop: \"10px\",\n  },\n});\n\nexport const SudokuBox = (): JSX.Element => {\n  const classes = useStyles();\n  const [sudoku, setSudoku] = React.useState<Sudoku>({\n    history: [],\n  });\n  const [step, setStep] = React.useState(0);\n\n  const handlerEditBoard = React.useCallback(\n    (i: number) => (j: Position, v: SudokuNumber) => {\n      const editedBoard = {\n        ...sudoku.history[i],\n        grid: sudoku.history[i].grid.map((cell) =>\n          cell.i === j ? { ...cell, value: v } : cell\n        ),\n      };\n\n      setSudoku({\n        history: sudoku.history.map((board, n) =>\n          n === i ? editedBoard : board\n        ),\n      });\n    },\n    [sudoku.history]\n  );\n\n  const solveSudoku = React.useCallback(() => {\n    const history = solve(clone(sudoku.history[0]));\n    setSudoku({\n      history,\n    });\n  }, [sudoku.history]);\n\n  const onlyFilledBoards = sudoku.history.filter(\n    (board, i) =>\n      (i === 0 && sudoku.history.length > 1) ||\n      (board.process && \"id\" in board.process)\n  );\n\n  const handlerSetInitBoard = (board: Board) => {\n    setSudoku({\n      history: [board],\n    });\n    setStep(1);\n  };\n\n  return (\n    <Container className={classes.root}>\n      <HorizontalStepper step={step}></HorizontalStepper>\n      {step === 0 && (\n        <SudokuUploader setInitBoard={handlerSetInitBoard}></SudokuUploader>\n      )}\n      {step === 1 && (\n        <SudokuEditor\n          grid={sudoku.history[0].grid}\n          editBoard={handlerEditBoard(0)}\n          onClickBackButton={() => {\n            setStep(0);\n          }}\n          onClickSolveButton={() => {\n            solveSudoku();\n            setStep(2);\n          }}\n        ></SudokuEditor>\n      )}\n      {step === 2 && (\n        <SudokuAnswer\n          history={onlyFilledBoards}\n          onClickBackButton={() => {\n            setStep(1);\n          }}\n        ></SudokuAnswer>\n      )}\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nexport const Header = (): JSX.Element => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\">\n          数独解答プログラム\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { SudokuBox } from \"./components/Sudoku\";\nimport { Header } from \"./components/Header\";\n\nconst App = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <SudokuBox></SudokuBox>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}